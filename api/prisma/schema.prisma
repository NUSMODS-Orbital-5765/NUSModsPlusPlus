// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int            @id @default(autoincrement())
  name             String
  role             String
  NUSId            String         @unique
  username         String         @unique
  password         String
  email            String         @unique
  faculty          String
  academicPlan     String?
  primaryDegree    String?
  secondDegree     String?
  secondMajor      String?
  programme        String?
  position         String?
  minor            String[]
  interests        String[]
  avatar           String?
  Post             Post[]         @relation("createdPost")
  Comment          Comment[]
  Event            Event[]
  NotificationFrom Notification[] @relation("from")
  NotificationTo   Notification[] @relation("to")
  ModulePlan       ModulePlan[]
}

model Post {
  id           Int       @id @default(autoincrement())
  title        String
  dateCreated  DateTime
  relatedMajor String?
  category     String
  content      String
  upload_file  String[]
  tags         String[]
  author       User      @relation("createdPost", fields: [PostAuthorId], references: [id])
  PostAuthorId Int
  like         String[]
  likeAmount   Int       @default(0)
  Comment      Comment[]
}

model Comment {
  id           Int         @id @default(autoincrement())
  dateCreated  DateTime
  author       User        @relation(fields: [authorId], references: [id])
  content      String
  post         Post[]
  authorId     Int
  ModulePlan   ModulePlan? @relation(fields: [modulePlanId], references: [nanoid])
  modulePlanId String?
}

model Programme {
  id                  Int               @id @default(autoincrement())
  name                String
  combination         String[]
  commonModule        CommonModuleGroup @relation(fields: [commonModuleGroupId], references: [id])
  coreModule          CoreModuleGroup[]
  commonModuleGroupId Int
}

model CoreModuleGroup {
  id        Int         @id @default(autoincrement())
  name      String
  faculty   String?
  rules     Json
  programme Programme[]
}

model CommonModuleGroup {
  id        Int         @id @default(autoincrement())
  name      String
  faculty   String
  rules     Json
  Programme Programme[]
}

model Module {
  id                  Int      @id @default(autoincrement())
  acadYear            String
  preclusion          String?
  description         String
  title               String
  department          String
  faculty             String
  workload            String?
  attributes          Json?
  prerequisite        String?
  moduleCredit        String
  moduleCode          String
  prereqTree          Json?
  aliases             String[]
  corequisite         String?
  fulfillRequirements String[]
}

model Event {
  id       Int    @id @default(autoincrement())
  name     String
  date     String
  time     String
  category String
  priority Int
  user     User   @relation(fields: [userId], references: [id])
  userId   Int
}

model Notification {
  id          Int      @id @default(autoincrement())
  timestamp   DateTime
  content     String
  type        String
  author      User     @relation("from", fields: [userIdFrom], references: [id])
  userIdFrom  Int
  target      User     @relation("to", fields: [userIdTo], references: [id])
  userIdTo    Int
  hiddenValue Json?
}

model ModulePlan {
  id                   Int       @id @default(autoincrement())
  nanoid               String    @unique
  owner                User      @relation(fields: [userId], references: [id])
  academicPlan         Json?
  gradRequirementsDict Json?
  semesterModulesDict  Json?
  isDefault            Boolean   @default(false)
  status               String?
  userId               Int
  AdminComment         Comment[]
}
